<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">              

	<!-- c3p0配置数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="com.mysql.cj.jdbc.Driver"/>
		<!-- 解决mysql时区问题，采用上海时间 -->
		<property name="jdbcUrl" value="jdbc:mysql://localhost:3306/findwork?serverTimezone=Asia/Shanghai"/>
		<property name="user" value="root"/>
		<property name="password" value="88888888"/>
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="1"/>
		<!--连接池中保留的最小连接数。-->
		<property name="minPoolSize" value="1"/>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="300"/>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="60"/>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="5"/>
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60"/>
	</bean>
	
	<!-- 配置jdbc数据源 -->
	<bean id="dataSourceOfJdbc" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://localhost:3306/findwork?serverTimezone=Asia/Shanghai"/>
		<property name="username" value="root"/>
		<property name="password" value="88888888"/>
	</bean>
	
	<!-- 配置SessionFactory -->
		<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
			 <property name="dataSource" ref="dataSourceOfJdbc"/>
			 <property name="mappingResources">
			    <list>
			      <value>com/zhbit/findwork/entity/Role.hbm.xml</value>
			      <value>com/zhbit/findwork/entity/Business.hbm.xml</value>
			      <value>com/zhbit/findwork/entity/User.hbm.xml</value>
			      <value>com/zhbit/findwork/entity/Collection_Business.hbm.xml</value>
			      <value>com/zhbit/findwork/entity/Cv.hbm.xml</value>
			    </list>
			 </property>
			 <property name="hibernateProperties">
			 <props>
			 <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
			 <!-- 此属性禁止使用 -->
			 <!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
			 <prop key="hibernate.show_sql">true</prop>
			 <prop key="hibernate.format_sql">true</prop>
			 <prop key="hibernate.current_session_context_class">
				org.springframework.orm.hibernate4.SpringSessionContext</prop>
			 </props>
			 </property>
		</bean> 
	
	
	 <!-- 配置事务管理器 -->
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	<!--使用基于注解方式配置事务
	<tx:annotation-driven transaction-manager="txManager"/> -->
	
	<!-- tx:advice：定义事务通知，transaction-manager属性用于指定事务管理器 --> 
	<tx:advice id="txAdvice" transaction-manager="txManager">
		  <tx:attributes>
		  	<!-- tx:method为某个或某些（name属性可使用通配符）指定方法的5种事务属性; rollback-for属性用于设置事务回滚的异常，若有多个，则用逗号隔开 -->
		    <tx:method name="get*" read-only="true" />
		    <tx:method name="*" propagation="REQUIRED" timeout="20" read-only="false"/>
		  </tx:attributes>
	</tx:advice>
		
		
	<!--使用基于XML方式配置事务 -->
	<!-- 没有设置proxy-target-class=true时，单元测试无法将roleServiceImpl的Bean强制转换为RoleServiceImpl 
		解决办法：
			1.设置<aop:config proxy-target-class=true>
			2.不将roleServiceImpl转换成RoleServiceImpl，而是转换成实现类RoleService
		-->
	<aop:config>
		<!-- aop:pointcut:使用切入点表达式定义切入点 -->
	  	<aop:pointcut id="transactionPointcut" expression="execution(* com.zhbit.findwork.service.impl.*.*(..))"/>
	  	<!-- 为方便单元测试，暂时将事务定在dao层开启 -->
	  	<!-- <aop:pointcut id="transactionPointcut" expression="execution(* com.zhbit.findwork.dao.impl.*.*(..))"/> -->
	  	<!-- aop:advisor：用于指定哪些Bean应该被通知 -->
	  	<aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut"/>
	</aop:config>
	
	
	
	
	
	
	<!-- 引入团队成员的spring配置文件 -->
	<import resource="applicationContext_xinshuo.xml"/>
	<import resource="applicationContext_delue.xml"/>
	<import resource="applicationContext_yufeng.xml"/>
	<import resource="applicationContext_qinzhi.xml"/>
	<import resource="applicationContext_shiping.xml"/>
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	           
</beans>